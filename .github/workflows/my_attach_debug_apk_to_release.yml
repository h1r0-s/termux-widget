name: Attach Debug APK To Release

on:
  push:
    branches:
      - my/*
  pull_request:
    branches:
      - my/*
  workflow_dispatch:
    branches:
      - my/*

jobs:
  attach-apks:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3
        with:
          ref: ${{ env.GITHUB_REF }}

      - name: Modify app/build.gradle
        run: |
          # Retrieve keystore file from Emacs feature/android branch.
          git clone --depth 1 \
                    --branch feature/android \
                    --no-checkout https://github.com/emacs-mirror/emacs.git
          git -C emacs sparse-checkout set java/emacs.keystore
          git -C emacs checkout feature/android

          # sed app/build.gradle to refer java/emacs.keystore instead of testkey_untrusted.jks.
          perl -pi -e "s|storeFile file\('testkey_untrusted.jks'\)|storeFile file('../emacs/java/emacs.keystore')|;s|keyAlias 'alias'|keyAlias 'emacs keystore'|;s|storePassword 'xrj45yWGLbsO7W0v'|storePassword 'emacs1'|;s|keyPassword 'xrj45yWGLbsO7W0v'|keyPassword 'emacs1'|" app/build.gradle

      - name: Build and upload artifacts
        shell: bash {0}
        run: |
          exit_on_error() {
              echo "$1"
              echo "Deleting '$RELEASE_VERSION_NAME' release and '$GITHUB_REF' tag"
              hub release delete "$RELEASE_VERSION_NAME"
              git push --delete origin "$GITHUB_REF"
              exit 1
          }

          echo "Setting vars"
          # Set RELEASE_VERSION_NAME to "<CURRENT_VERSION_NAME>+<last_commit_hash>"
          CURRENT_VERSION_NAME_REGEX='\s+versionName "([^"]+)"$'
          CURRENT_VERSION_NAME="$(grep -m 1 -E "$CURRENT_VERSION_NAME_REGEX" ./app/build.gradle | sed -r "s/$CURRENT_VERSION_NAME_REGEX/\1/")"
          RELEASE_VERSION_NAME="v$CURRENT_VERSION_NAME+${GITHUB_SHA:0:7}" # The "+" is necessary so that versioning precedence is not affected
          if ! printf "%s" "${RELEASE_VERSION_NAME/v/}" | grep -qP '^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(?:-((?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+([0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$'; then
            exit_on_error "The versionName '${RELEASE_VERSION_NAME/v/}' is not a valid version as per semantic version '2.0.0' spec in the format 'major.minor.patch(-prerelease)(+buildmetadata)'. https://semver.org/spec/v2.0.0.html."
          fi

          APK_DIR_PATH="./app/build/outputs/apk/debug"
          APK_VERSION_TAG="$RELEASE_VERSION_NAME+github-debug"
          APK_BASENAME_PREFIX="termux-widget_$APK_VERSION_TAG"

          echo "Building APK for '$RELEASE_VERSION_NAME' release"
          export TERMUX_WIDGET_APK_VERSION_TAG="$APK_VERSION_TAG" # Used by app/build.gradle
          if ! ./gradlew assembleDebug; then
            exit_on_error "Build failed for '$RELEASE_VERSION_NAME' release."
          fi

          echo "Validating APK"
          if ! test -f "$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk"; then
            files_found="$(ls "$APK_DIR_PATH")"
            exit_on_error "Failed to find built APK at '$APK_DIR_PATH/${APK_BASENAME_PREFIX}.apk'. Files found: "$'\n'"$files_found"
          fi

          echo "Generating sha25sums file"
          if ! (cd "$APK_DIR_PATH"; sha256sum "${APK_BASENAME_PREFIX}.apk" > sha256sums); then
            exit_on_error "Generate sha25sums failed for '$RELEASE_VERSION_NAME' release."
          fi
          
      - name: Upload APKs to GitHub artifact
        uses: actions/upload-artifact@v3
        with:
          name: apk
          path: ./app/build/outputs/apk/debug/*.apk

  upload:
    runs-on: ubuntu-latest
    needs: attach-apks
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
      - name: Upload APKs to release
        uses: termux/upload-release-action@v4.1.0
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: "**/*.apk"
          file_glob: true
          release_name: 
          tag: ${{ github.run_number }}-${{ github.run_id }}
          checksums: sha256,sha512,md5
